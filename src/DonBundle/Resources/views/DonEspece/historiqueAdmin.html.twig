<html lang="fr">
{#xmlns="http://www.w3.org/1999/html"#}
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
    function init() {
        {{ gc_draw(barchart, 'div_graph') }}
        {{ gc_draw(barchart1, 'div_graph1') }}
    }

</script>
<body onload="init()">
<link href="C:\wamp64\www\HandshakeWebSym-Samyra\web\assets\css\bootstrap.min.css" rel="stylesheet" type="text/css" />

<center>
    <hr class = "my-4">
    <img src="C:\wamp64\www\HandshakeWebSym-Samyra\web\images\icons\logo.png">
    <hr class = "my-4">
    <h1> Historique de Dons</h1>
    <hr class = "my-4">

    <table
           class="table table-hover">
        <thead>
        <tr>
            {#            <th scope="col">Id</th>#}
            <th scope="col">UserName</th>
            <th scope="col">Typedon</th>
            <th scope="col">Cibledon</th>
            <th scope="col">Montantdon</th>
            <th scope="col">Libelledonnature</th>
            <th scope="col">Categoriedonnature</th>
            <th scope="col">Datedon</th>

        </tr>
        </thead>
        <tbody>
        {% for donEspece in donEspeces %}
            {% if donEspece.typeDon == "espece" %}
                {% for user in users %}
                    {% if user.id == donEspece.userId %}
                        <tr class="table-primary">
                            {#                    <td><a href="{{ path('donespece_show', { 'id': donEspece.id }) }}">{{ donEspece.id }}</a></td>#}
                            <td>{{ user.username }}</td>
                            <td>{{ donEspece.typeDon }}</td>
                            <td>{{ donEspece.cibleDon }}</td>
                            <td>{{ donEspece.montantDon }}</td>
                            <td></td>
                            <td></td>
                            <td>{% if donEspece.dateDon %}{{ donEspece.dateDon|date('Y-m-d') }}{% endif %}</td>

                        </tr>
                    {% endif %}
                {% endfor %}
            {% endif %}
        {% endfor %}
        {% for donNature in donNatures %}
            {% if donNature.typeDon == "nature" %}
                {% for user in users %}
                    {% if user.id == donNature.userId %}
                        <tr class="table-primary">
                            {#                    <td><a href="{{ path('donnature_show', { 'id': donNature.id }) }}">{{ donNature.id }}</a></td>#}
                            <td>{{ user.username }}</td>
                            <td>{{ donNature.typeDon }}</td>
                            <td>{{ donNature.cibleDon }}</td>
                            <td></td>
                            <td>{{ donNature.libelleDonNature }}</td>
                            <td>{{ donNature.categorieDonNature }}</td>
                            <td>{% if donNature.dateDon %}{{ donNature.dateDon|date('Y-m-d') }}{% endif %}</td>

                        </tr>
                    {% endif %}
                {% endfor %}
            {% endif %}
        {% endfor %}
        </tbody>
    </table>
    <hr class = "my-4">
</center>

<div>
    <center><h1 class="text-dark mt-1"><span data-plugin="counterup">STATISTIQUES</span></h1>
        <hr class = "my-4">
        <hr>
        <h2>1 - Don Nature</h2>
    <div id="div_graph" style="width:500px;height:500px;"></div>
    <hr class = "my-4">
    <hr>
    <h2>2 - Don Espece</h2>
    <div id="div_graph1" style="width:500px; height:500px;"></div>
    </center>
</div>


<style>
    #chartdiv {
        width       : 100%;
        height      : 500px;
        font-size   : 11px;
    }
</style>
<script type="text/javascript" src="http://www.amcharts.com/lib/3/amcharts.js"></script>
<script type="text/javascript" src="http://www.amcharts.com/lib/3/serial.js"></script>
<script type="text/javascript" src="http://www.amcharts.com/lib/3/themes/light.js"></script>
<div id="chartdiv" style="width:500px;"></div>
<script>
    /*  probability.js    12-25-2008    JavaScript
  Copyright (C)2008 Steven Whitney.
  Initially published by http://25yearsofprogramming.com.

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License (GPL)
  Version 3 as published by the Free Software Foundation.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

Functions related to probability calculations.

*/
    //----------------------------------------------------------------------------------------------
    // Calculates a point Z(x), the Probability Density Function, on any normal curve.
    // This is the height of the point ON the normal curve.
    // For values on the Standard Normal Curve, call with Mean = 0, StdDev = 1.
    function NormalDensityZx( x, Mean, StdDev ) {
        var a = x - Mean;
        return Math.exp( -( a * a ) / ( 2 * StdDev * StdDev ) ) / ( Math.sqrt( 2 * Math.PI ) * StdDev );
    }
    //----------------------------------------------------------------------------------------------
    // Calculates Q(x), the right tail area under the Standard Normal Curve.
    function StandardNormalQx( x ) {
        if ( x === 0 ) // no approximation necessary for 0
            return 0.50;

        var t1, t2, t3, t4, t5, qx;
        var negative = false;
        if ( x < 0 ) {
            x = -x;
            negative = true;
        }
        t1 = 1 / ( 1 + ( 0.2316419 * x ) );
        t2 = t1 * t1;
        t3 = t2 * t1;
        t4 = t3 * t1;
        t5 = t4 * t1;
        qx = NormalDensityZx( x, 0, 1 ) * ( ( 0.319381530 * t1 ) + ( -0.356563782 * t2 ) +
            ( 1.781477937 * t3 ) + ( -1.821255978 * t4 ) + ( 1.330274429 * t5 ) );
        if ( negative == true )
            qx = 1 - qx;
        return qx;
    }
    //----------------------------------------------------------------------------------------------
    // Calculates P(x), the left tail area under the Standard Normal Curve, which is 1 - Q(x).
    function StandardNormalPx( x ) {
        return 1 - StandardNormalQx( x );
    }
    //----------------------------------------------------------------------------------------------
    // Calculates A(x), the area under the Standard Normal Curve between +x and -x.
    function StandardNormalAx( x ) {
        return 1 - ( 2 * StandardNormalQx( Math.abs( x ) ) );
    }
    //----------------------------------------------------------------------------------------------

    /**
     * Define values where to put vertical lines at
     */
    var verticals = [
        -1.4, -0.2, 1.2
    ];

    /**
     * Calculate data
     */
    var chartData = [];
    for ( var i = -5; i < 5.1; i += 0.1 ) {
        var dp = {
            category: i,
            value: NormalDensityZx( i, 0, 1 )
        };
        if ( verticals.indexOf( Math.round( i * 10 ) / 10 ) !== -1 ) {
            dp.vertical = dp.value;
        }
        chartData.push( dp );
    }

    /**
     * Create a chart
     */
    var chart = AmCharts.makeChart( "chartdiv", {
        "type": "serial",
        "theme": "light",
        "dataProvider": chartData,
        "precision": 2,
        "valueAxes": [ {
            "gridAlpha": 0.2,
            "dashLength": 0
        } ],
        "startDuration": 1,
        "graphs": [ {
            "balloonText": "[[category]]: <b>[[value]]</b>",
            "lineThickness": 3,
            "valueField": "value"
        }, {
            "balloonText": "",
            "fillAlphas": 1,
            "type": "column",
            "valueField": "vertical",
            "fixedColumnWidth": 2,
            "labelText": "[[value]]",
            "labelOffset": 20
        } ],
        "chartCursor": {
            "categoryBalloonEnabled": false,
            "cursorAlpha": 0,
            "zoomable": false
        },
        "categoryField": "category",
        "categoryAxis": {
            "gridAlpha": 0.05,
            "startOnAxis": true,
            "tickLength": 5,
            "labelFunction": function( label, item ) {
                return '' + Math.round( item.dataContext.category * 10 ) / 10;
            }
        }

    } );
</script>
</body>

{#<script>#}
{#    window.status = "ready";#}
{#</script>#}
</html>